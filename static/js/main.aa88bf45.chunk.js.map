{"version":3,"sources":["Components/Layout/Assignment.js","Components/Layout/Table.js","Components/Layout/index.js","Routing/Landing/index.js","Routing/NotFound/index.js","Routing/index.js","App/App.js","serviceWorker.js","index.js"],"names":["Assignment","console","log","data","job","className","map","item","index","workorders","items","style","border","padding","jobname","name","moment","Date","format","Component","Table","props","handleClick","selectedRef","state","clickref","rep","setState","showorder","target","value","JSON","stringify","handletdClick","ref","order","orders","id","showAlert","exampleRef","React","createRef","exampleRef1","onClick","this","message","type","showIcon","bind","Layout","marginTop","display","flexDirection","justifyContent","Employess","person","margin","Name","marginLeft","Landing","NotFound","AppRoutes","exact","path","component","Pagenotfound","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.aa88bf45.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport data from '../../data/getWorkOrderList.json';\r\nimport moment from 'moment';\r\nimport './style.scss';\r\nclass Assignment extends Component {\r\n  render() {\r\n    console.log(data.job);\r\n    return (\r\n      <div className={'assignment-container'} >\r\n        {\r\n          data.job.map((item, index) =>\r\n            (\r\n              <div className={\"work-order\"}>\r\n                {\r\n                  item.workorders.map((items) =>\r\n                    (\r\n                      <div style={{ border: \"1px solid\", padding: \"2px\" }}>\r\n                        <p > {item.jobname} </p>\r\n                        <p > {items.name}</p>\r\n\r\n                        <p>{moment(items.Date).format('llll')}</p>\r\n                      </div>\r\n                    ))\r\n                }\r\n\r\n              </div>\r\n            ))\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Assignment;","import React, { useRef } from \"react\";\r\nimport './style.scss';\r\nimport Assignment from './Assignment';\r\nimport data from '../../data/getWorkOrderList.json';\r\n\r\nimport moment from 'moment';\r\nimport { Alert } from 'antd';\r\n\r\n\r\nclass Table extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showorder: false,\r\n      job: \"\",\r\n      order: null,\r\n      item: \"\",\r\n      orders: \"\",\r\n      id: false,\r\n      items: \"\",\r\n      clickref: \"\",\r\n      showAlert: false\r\n    }\r\n    this.exampleRef = React.createRef();\r\n    this.exampleRef1 = React.createRef();\r\n  }\r\n\r\n  handleClick = (items, item) => {\r\n    const selectedRef = this.state.clickref;\r\n    console.log(selectedRef, 'kamal');\r\n\r\n\r\n    const rep = items.name;\r\n    console.log(rep, 'sssssssssss');\r\n    this.setState({ showorder: false })\r\n\r\n    selectedRef.target.value = JSON.stringify(item.jobname + \" \" + items.name);\r\n\r\n\r\n\r\n\r\n    // this.exampleRef1.current.value = JSON.stringify(items);\r\n    // this.setState({ items: event.currentTarget.dataset.mode });\r\n\r\n  }\r\n  handletdClick = (ref) => {\r\n    this.setState({ showorder: true, clickref: { ...ref } })\r\n    //this.exampleRef.current.value = \"snks\"\r\n    // ref.current.value = \"kamal\";\r\n    //console.log(ref, 'iiiii');\r\n\r\n\r\n  }\r\n  render() {\r\n    return (\r\n      <>\r\n\r\n        <div className={'save-btn-container'}>\r\n          <button onClick={() => this.setState({ showAlert: true })} >Save</button>\r\n        </div>\r\n        {\r\n          this.state.showAlert &&\r\n          <Alert message=\"Saved\" type=\"info\" showIcon />\r\n        }\r\n        <div onClick={() => this.setState({ showAlert: false })} className={\"table-container\"} >\r\n          <table className={\"table\"}>\r\n            <tr className={\"cell-container\"}>\r\n              <td>  20-Apr-2020</td>\r\n              <td>  21-Apr-2020</td>\r\n              <td>  22-Apr-2020</td>\r\n              <td>  23-Apr-2020</td>\r\n              <td>  24-Apr-2020</td>\r\n              <td>  25-Apr-2020</td>\r\n            </tr>\r\n            <tr className={\"cell-container\"}>\r\n              <td><input className={'input-container'} onClick={this.handletdClick} /></td>\r\n              <td><input className={'input-container'} onClick={this.handletdClick} /></td>\r\n              {/* <td><input onClick={() => { this.handletdClick(this.exampleRef) }} ref={this.exampleRef} /></td>\r\n              <td><input onClick={() => { this.handletdClick(this.exampleRef1) }} ref={this.exampleRef1} /></td> */}\r\n              <td><input className={'input-container'} onClick={this.handletdClick} /></td>\r\n              <td><input className={'input-container'} onClick={this.handletdClick} /></td>\r\n              <td><input className={'input-container'} onClick={this.handletdClick} /></td>\r\n              <td><input className={'input-container'} onClick={this.handletdClick} /></td>\r\n\r\n            </tr>\r\n            <tr className={\"cell-container\"}>\r\n              <td><input className={'input-container'} onClick={this.handletdClick} /></td>\r\n              <td><input className={'input-container'} onClick={this.handletdClick} /></td>\r\n              {/* <td><input onClick={() => { this.handletdClick(this.exampleRef) }} ref={this.exampleRef} /></td>\r\n              <td><input onClick={() => { this.handletdClick(this.exampleRef1) }} ref={this.exampleRef1} /></td> */}\r\n              <td><input className={'input-container'} onClick={this.handletdClick} /></td>\r\n              <td><input className={'input-container'} onClick={this.handletdClick} /></td>\r\n              <td><input className={'input-container'} onClick={this.handletdClick} /></td>\r\n              <td><input className={'input-container'} onClick={this.handletdClick} /></td>\r\n\r\n            </tr>\r\n            <tr className={\"cell-container\"}>\r\n              <td><input className={'input-container'} onClick={this.handletdClick} /></td>\r\n              <td><input className={'input-container'} onClick={this.handletdClick} /></td>\r\n              {/* <td><input onClick={() => { this.handletdClick(this.exampleRef) }} ref={this.exampleRef} /></td>\r\n              <td><input onClick={() => { this.handletdClick(this.exampleRef1) }} ref={this.exampleRef1} /></td> */}\r\n              <td><input className={'input-container'} onClick={this.handletdClick} /></td>\r\n              <td><input className={'input-container'} onClick={this.handletdClick} /></td>\r\n              <td><input className={'input-container'} onClick={this.handletdClick} /></td>\r\n              <td><input className={'input-container'} onClick={this.handletdClick} /></td>\r\n\r\n            </tr>\r\n\r\n          </table>\r\n\r\n        </div >\r\n        {\r\n          this.state.showorder &&\r\n          <div className={\"assign-container\"}>\r\n            {\r\n              data.job.map((item, index) =>\r\n                (\r\n                  <div className={\"work-order\"}>\r\n                    {\r\n                      item.workorders.map((items) =>\r\n                        (\r\n                          <div onClick={this.handleClick.bind(this, items, item)} style={{ border: \"1px solid\", padding: \"2px\" }}>\r\n\r\n                            <p> {item.jobname} </p>\r\n                            <p> {items.name}</p>\r\n                            <p>{moment(items.Date).format(\"llll\")}</p>\r\n\r\n                          </div>\r\n                        ))\r\n                    }\r\n\r\n                  </div>\r\n                ))\r\n            }\r\n          </div>\r\n        }\r\n      </>\r\n    )\r\n  }\r\n}\r\nexport default Table;","import React, { Component } from 'react';\r\nimport './style.scss';\r\nimport Table from './Table';\r\nimport AssignmentCell from './Assignment';\r\nimport data from '../../data/getEmployeeList.json';\r\nimport Assignment from './Assignment';\r\n\r\n\r\nclass Layout extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showorder: false\r\n    }\r\n  }\r\n  render() {\r\n    console.log(data);\r\n    return (\r\n      <div className={\"layout-container\"}>\r\n        <div className={\"title-container\"}>\r\n          <h3 className={\"title\"}>Work Order Assignment Tool</h3>\r\n        </div>\r\n        <div className={\"employee-container\"}>\r\n          <div style={{ marginTop: \"150px\", display: \"flex\", flexDirection: \"column\", justifyContent: \"space-around\" }}>\r\n            {\r\n              data.Employess.map((person, index) => (\r\n                <p><span style={{ margin: \"10px\" }}>{person.Name}</span></p>\r\n              ))\r\n            }\r\n          </div>\r\n          <div>\r\n            <Table />\r\n          </div>\r\n        </div>\r\n\r\n\r\n        <div style={{ display: \"flex\", justifyContent: \"start\", margin: \"2px\", marginLeft: \"100px\", padding: \"10px\" }}>\r\n          <div style={{ margin: \"5px\" }}>\r\n            <AssignmentCell />\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Layout;","import React, { Component } from 'react';\r\nimport Layout from '../../Components/Layout';\r\n\r\nclass Landing extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Layout />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Landing;","import React, { Component } from 'react';\r\n\r\nclass NotFound extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        Page Not Found\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NotFound;","import React, { Component } from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport Landing from './Landing';\r\nimport Pagenotfound from './NotFound';\r\n\r\nclass AppRoutes extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Router>\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Landing} />\r\n            <Route component={Pagenotfound} />\r\n          </Switch>\r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppRoutes;","import React, { Component } from 'react';\nimport AppRoutes from '../Routing/index';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <AppRoutes />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport 'antd/dist/antd.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}